# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sr0F3HBpozmoI7Yq_NuuW-Z55qJWPrn2
"""

import psutil
import time
import json
import requests
from datetime import datetime

LOG_FILE = "performance_metrics.json"
THRESHOLDS = {
    "cpu": 80,      # Hardcoded CPU usage percentage
    "memory": 80,   # Hardcoded Memory usage percentage
    "disk_io": 1000,  # Hardcoded Disk I/O operations per second
    "network_latency": 100,  # Hardcoded Latency in ms
    "application_bottlenecks": 0.5,  # Hardcoded Custom application logic
    "session_management": 200,  # Hardcoded Simulated session count
}

# Slack Webhook URL
SLACK_WEBHOOK_URL = "https://hooks.slack.com/services/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"

def send_alert(metric, value):
    """Send an alert to Slack when a metric exceeds its threshold."""
    message = {
        "text": f"Alert: {metric} exceeded threshold. Current value: {value}"
    }

    # Post the message to the Slack webhook URL
    response = requests.post(SLACK_WEBHOOK_URL, json=message)

    if response.status_code != 200:
        print(f"Failed to send alert to Slack: {response.status_code}, {response.text}")
    else:
        print(f"Alert sent to Slack: {metric} with value {value}")

def log_metrics(metrics):
    with open(LOG_FILE, "a") as log_file:
        json.dump(metrics, log_file)
        log_file.write("\n")

def check_application_bottlenecks():
    simulated_bottleneck = 0.4
    return simulated_bottleneck

def check_network_latency():
    return 20

def check_session_management():

    simulated_session_count = 150
    return simulated_session_count

# Monitor system metrics for a defined number of iterations
num_iterations = 10
for _ in range(num_iterations):
    # Performance metrics collection
    metrics = {
        "timestamp": datetime.now().isoformat(),
        "cpu_usage": psutil.cpu_percent(),
        "memory_usage": psutil.virtual_memory().percent,
        "disk_io": psutil.disk_io_counters().read_count + psutil.disk_io_counters().write_count,
        "network_latency": check_network_latency(),
        "application_bottlenecks": check_application_bottlenecks(),
        "session_management": check_session_management(),
    }

    # Log metrics
    log_metrics(metrics)

    # Check against thresholds and print warnings if exceeded
    if metrics["cpu_usage"] > THRESHOLDS["cpu"]:
        print(f"Warning: CPU Usage exceeded threshold! Current value: {metrics['cpu_usage']}")
        send_alert("CPU Usage", metrics["cpu_usage"])
    if metrics["memory_usage"] > THRESHOLDS["memory"]:
        print(f"Warning: Memory Usage exceeded threshold! Current value: {metrics['memory_usage']}")
        send_alert("Memory Usage", metrics["memory_usage"])
    if metrics["disk_io"] > THRESHOLDS["disk_io"]:
        print(f"Warning: Disk I/O exceeded threshold! Current value: {metrics['disk_io']}")
        send_alert("Disk I/O", metrics["disk_io"])
    if metrics["network_latency"] > THRESHOLDS["network_latency"]:
        print(f"Warning: Network Latency exceeded threshold! Current value: {metrics['network_latency']}")
        send_alert("Network Latency", metrics["network_latency"])
    if metrics["application_bottlenecks"] > THRESHOLDS["application_bottlenecks"]:
        print(f"Warning: Application Bottlenecks exceeded threshold! Current value: {metrics['application_bottlenecks']}")
        send_alert("Application Bottlenecks", metrics["application_bottlenecks"])
    if metrics["session_management"] > THRESHOLDS["session_management"]:
        print(f"Warning: Session Management exceeded threshold! Current value: {metrics['session_management']}")
        send_alert("Session Management", metrics["session_management"])