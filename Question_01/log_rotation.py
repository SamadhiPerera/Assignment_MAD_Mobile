# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sr0F3HBpozmoI7Yq_NuuW-Z55qJWPrn2
"""

import os
import time
import shutil
from zipfile import ZipFile
from datetime import datetime, timedelta

# Path to the log directory
log_dir = '/content/logs'  # You can create this directory in Colab to test
archive_dir = '/content/archived_logs'  # Directory where archived logs are stored

# Retention period for logs (in days)
log_retention_days = 7

# Ensure the archive directory exists
os.makedirs(archive_dir, exist_ok=True)

def archive_old_logs():
    # Get the current time
    now = time.time()

    # Define the retention threshold
    retention_threshold = now - log_retention_days * 86400  # 86400 seconds in a day

    for log_file in os.listdir(log_dir):
        log_path = os.path.join(log_dir, log_file)

        # Check if the log file is older than the retention period
        if os.path.isfile(log_path) and os.path.getmtime(log_path) < retention_threshold:
            # Create a zip archive of the log file
            zip_name = f"{os.path.splitext(log_file)[0]}.zip"
            zip_path = os.path.join(archive_dir, zip_name)

            with ZipFile(zip_path, 'w') as zipf:
                zipf.write(log_path, os.path.basename(log_path))
                print(f"Archived: {log_file} -> {zip_name}")

            # Remove the original log file after archiving
            os.remove(log_path)
            print(f"Deleted: {log_file}")

# Function to delete archives older than retention period
def clean_archived_logs():
    now = time.time()
    retention_threshold = now - log_retention_days * 86400

    for archive_file in os.listdir(archive_dir):
        archive_path = os.path.join(archive_dir, archive_file)

        # Check if the archive is older than the retention period
        if os.path.isfile(archive_path) and os.path.getmtime(archive_path) < retention_threshold:
            os.remove(archive_path)
            print(f"Deleted archive: {archive_file}")

# Run the log management process
print("Archiving old logs...")
archive_old_logs()

print("\nCleaning old archives...")
clean_archived_logs()

print("\nLog rotation and cleanup completed.")