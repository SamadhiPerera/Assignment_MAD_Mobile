# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sr0F3HBpozmoI7Yq_NuuW-Z55qJWPrn2
"""

import time
from datetime import datetime, timedelta

# Sample Incident Class
class Incident:
    def __init__(self, id, severity, description, created_at):
        self.id = id
        self.severity = severity  # Severity: "low", "medium", "high", "critical"
        self.description = description
        self.created_at = created_at
        self.status = "open"  # Incident status

    def escalate(self):
        print(f"Escalating Incident ID: {self.id} | Severity: {self.severity} | Description: {self.description}")
        self.status = "escalated"

incidents = [
    Incident(1, "low", "Minor issue", datetime.now() - timedelta(minutes=5)),
    Incident(2, "medium", "Moderate issue", datetime.now() - timedelta(minutes=15)),
    Incident(3, "high", "Major issue", datetime.now() - timedelta(minutes=25)),
    Incident(4, "critical", "Critical issue", datetime.now() - timedelta(minutes=35)),
]

def check_and_escalate(incidents):
    for incident in incidents:
        elapsed_time = datetime.now() - incident.created_at

        if incident.status == "open":
            if incident.severity == "low" and elapsed_time >= timedelta(minutes=10):
                incident.escalate()
            elif incident.severity == "medium" and elapsed_time >= timedelta(minutes=20):
                incident.escalate()
            elif incident.severity == "high" and elapsed_time >= timedelta(minutes=30):
                incident.escalate()
            elif incident.severity == "critical" and elapsed_time >= timedelta(minutes=40):
                incident.escalate()

# Simulate escalation check every minute
def run_escalation_monitor():
    while True:
        check_and_escalate(incidents)
        print("Incident status checked. Waiting for the next check...")
        time.sleep(60)  # Check every minute

if __name__ == "__main__":
    run_escalation_monitor()